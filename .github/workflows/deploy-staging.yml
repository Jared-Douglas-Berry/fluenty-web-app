name: Next.js Deployment to Staging

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  workflow_call:
    inputs:
      task-id:
        description: Optional task id to be added to version number pre-deployment
        required: false
        type: string
    outputs:
      version:
        description: The version that was released
        value: ${{ jobs.deploy.outputs.version }}

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Update Version
        run: |
          ${GITHUB_WORKSPACE}/.github/scripts/append_to_version.sh ${{ inputs.task-id }}
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('./package-lock.json')}}
      - name: Install dependencies and build
        run: |
          npm install
          npm run build
          ls
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
            name: dist-files
            path:
                ./out
      - name: Set Env Vars
        run: |
          echo "PACKAGE_VERSION=$(cat package.json | jq -r '.version')" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest

    needs: build

    outputs:
      version: ${{ env.PACKAGE_VERSION }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist-files-s3
      - name: output contents
        run: | 
          ls
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_KEY }}
          aws-region: ${{ secrets.AWS_SECRET_REGION_KEY }}
      - name: Sync build output to S3 bucket
        run: |
          aws s3 sync ./dist-files-s3 s3://${{ secrets.AWS_S3_BUCKET }}
      - name: Copy files to production website with the AWS CLI
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"